module collect-uncaught-exceptions
imports
  libdryad

strategies

  main =
    where(init-config)
    ; xtc-multi-io-wrap(
        observables-wrap(
          dryad-front
          ; uncaught-exceptions
        )
      )

  uncaught-exceptions =
    collect-all(?MethodDec(_, _), conc)
    ; map(print-uncaught-exceptions)
    ; <xtc-exit> 0

  print-uncaught-exceptions =
    ?MethodDec(MethodDecHead(_, _, _, Id(x), _, _), _)
    ; collect-uncaught-exceptions
    ; say(!x)
    ; if-verbose2(debug)
    ; if ?[] then
        say(!"  none ")
      else
        map(
          collect-om(is-string, conc)
          ; separate-by(|".")
          ; !["  - " | <id>]
          ; <fprintnl> (<stderr-stream>, <id>)
        )
      end

  init-config =
      <set-config> ("output-description", "Write resulting jtrees to files")
    ; <set-config> ("input-description", "Process Java source in files")
    ; <set-config> ("--tc", "on")

strategies

  /**
   * List of all uncaught exceptions in method declaration.
   */
  collect-uncaught-exceptions =
    collect-uncaught-exceptions-class
    <+ collect-uncaught-exceptions-invoke
    <+ collect-uncaught-exceptions-throw
    <+ collect-uncaught-exceptions-try
    <+ collect-uncaught-exceptions-default

  /**
   * Empty list of exception types; don't traverse down local class
   * definitions.
   */
  collect-uncaught-exceptions-class =
    ?ClassBody(_)
    ; ![]

  /**
   * Types of thrown exceptions by method invocation together with uncaught
   * exceptions in method name expression and arguments.
   */
  collect-uncaught-exceptions-invoke =
    ?Invoke(m, a)
    ; compile-time-declaration-attr
    ; lookup-method
    ; get-declared-exception-types
    ; <union>(
        <id>,
        <collect-uncaught-exceptions> (m, a)
      )

  /**
   * Type of thrown exception plus uncaught exception in Throw body.
   */
  collect-uncaught-exceptions-throw =
    ?Throw(e)
    ; <union>([<type-attr>e], <collect-uncaught-exceptions>e)

  /**
   * Filter catched exceptions from thrown exceptions in Try body, and take
   * the union with uncaught exceptions in the catch and finally clauses.
   */
  collect-uncaught-exceptions-try =
    (?Try(<id>, c) ; where(![] => f)
     + ?Try(<id>, c, f))
    ; collect-uncaught-exceptions
    ; filter(not(
        is-assignment-convertable-list(|<collect-catched-exceptions>c)
      ))
    ; <union>(
        <id>,
        <collect-uncaught-exceptions>c
      )
    ; <union>(
        <id>,
        <collect-uncaught-exceptions>f
      )

  /**
   * By default take union of uncaught exceptions in all children.
   */
  collect-uncaught-exceptions-default =
    crush(![], union, collect-uncaught-exceptions)

  /**
   * Get exception types from list of Catch clauses.
   */
  collect-catched-exceptions =
    map( \ Catch(Param(_, e, _), _) -> e \ )

/**
 * Util
 */
strategies

  /**
   * Succeeds if the current term is assignment convertable to one of the types ts.
   *
   * @param List(Type)
   * @type  Type -> Type
   */
  is-assignment-convertable-list(|ts) =
    ?t; where(
      <fetch({to:
         ?to; <is-assignment-convertable(|to)> t
       })> ts)
