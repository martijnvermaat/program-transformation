module cyclomatic-complexity
imports
  libstrategolib
  Java-15

strategies

  main-cc =
    io-wrap(
      collect-om(?MethodDec(_, _))
      ; map(cyclomatic-complexity-metric)
    )

strategies

  /**
   * Calculate cyclomatic complexity of method declaration and return a tuple
   * with the method name and cyclomatic complexity.
   */
  cyclomatic-complexity-metric =
    ?MethodDec(MethodDecHead(_, _, _, Id(x), _, _), <id>)
    ; cyclomatic-complexity
    ; !(x, <id>)

  /**
   * Count number of decision points and increment the result.
   */
  cyclomatic-complexity =
    occurrences(is-decision-point)
    ; <add>(<id>, 1)

  /**
   * Succeed on Java construct that introduces a decision point.
   * For switch-case statements each case is considered a decision point,
   * analoguous to a corresponding if-else sequence.
   */
  is-decision-point =
    ?c#(_)
    ; <elem>(c, [
        "If",
        "AssertStm",
        "Catch",
        "While",
        "DoWhile",
        "For",
        "ForEach",
        "Case",
        "LazyAnd",
        "LazyOr",
        "Cond"])
