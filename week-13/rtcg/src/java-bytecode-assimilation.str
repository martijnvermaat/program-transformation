module java-bytecode-assimilation
imports
  libdryad
  Java-15-in-Java-15
  Java-EBlock
  assimilate-java/Classes
  assimilate-java/Statements
  assimilate-java/Expressions

strategies

  /**
   * todo: Tidy code and comments.
   */

  main =
    init-observables
    ; xtc-multi-io-wrap(
        observables-wrap(
          map(read-from)
          ; map(define-compilation-unit)
          ; dryad-reclassify
          ; map(get-ast)
          ; alltd(assimilate-in-method)
        )
      )

  init-observables =
    where(
      <set-config> (ObservableClasses(), [
        <xtc-find> "rt.classes",
        "../gnu-bytecode/kawa-1.8.jar"
      ])
    )

rules

  // find quoted code fragments in methods

  assimilate-in-method :
    MethodDec(head1, block1) -> MethodDec(head2, block2)
    where {| LocalVar
           : <alltd(declare-meta-param)> head1 => head2
           ; <alltd(assimilate-quotes)> block1 => block2
           |}

  // declare parameters marked as meta-var;
  // use dynamic rule to propagate to uses of variables

  declare-meta-param :
    Param([], t, MetaVar(Id(x))) -> Param([], t, Id(var))
    where <newjavaid> "var" => var
          ; rules( LocalVar : x -> var )

  // assimilated quote fragments

  assimilate-quotes =
    assimilate-quote-block-stms
    <+ assimilate-quoted-class
    <+ assimilate-meta-var

  /**
   * Assimilate a quoted class declaration. The assimilated fragment is an
   * expression that produces a ClassType.
   * Declaration of variables used in assimilation is done in a block, so they
   * can be used more than once.
   */
  assimilate-quoted-class :
    QuoteClassDec(cdec) ->
    expr|[ {|
              ClassType ~className;
              {
                ClassType thisClass;
                Method thisMethod;
                CodeAttr thisCode;
                ~bstm*:<assimilate-embedding> cdec
                ~className = thisClass;
              }
              | ~className
           |} ]|
    where !Id( <newjavaid> "class" ) => className

  assimilate-quote-block-stms :
   QuoteBlockStms(stms) -> Block(<mapconcat(assimilate-embedding)>stms)

  assimilate-meta-var :
    MetaVar(Id(x)) -> Id(var)
    where <LocalVar> x => var

  assimilate-embedding =
       assimilate-anti-quote
    <+ Assimilate(assimilate-embedding)
    <+ (debug ; fail)

  assimilate-anti-quote :
    EscapeFromStm(bstms) -> bstms'
    where <alltd(assimilate-quotes)> bstms => bstms'


strategies // utils

  // Create a new Java identifier given a string.

  newjavaid =
    newname

/*    !Id(<newname>) */
