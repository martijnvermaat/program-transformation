module assimilate-java/test
imports
  libstrategolib
  Java-EBlock
  libdryad
  assimilate-java/Classes
  assimilate-java/Statements
  assimilate-java/Expressions

strategies

  main =
    test-suite(!"assimilate-java-test",
        test-expressions
      ; test-statements
      ; test-classdecs
    )

  test-expressions = id

    ; apply-test(!"Simple literal",
      assimilate-exp,
      !e |[ 1 ]|,
      !bstm* |[ thisCode.emitPushInt(1); ]|
    )
    ; apply-test(!"Simple literal",
      assimilate-exp,
      !e |[ 3 ]|,
      !bstm* |[ thisCode.emitPushInt(3); ]|
    )
    ; apply-test(!"Simple literal addition",
      assimilate-exp,
      !e |[ 4 + 7 ]|,
      !bstm* |[ thisCode.emitPushInt(4);
                thisCode.emitPushInt(7);
                thisCode.emitAdd(); ]|
    )
    ; apply-test(!"Simple literal multiplication",
      assimilate-exp,
      !e |[ 7 * 2 ]|,
      !bstm* |[ thisCode.emitPushInt(7);
                thisCode.emitPushInt(2);
                thisCode.emitMul(); ]|
    )
    ; apply-test(!"Simple literal division",
      assimilate-exp,
      !e |[ 12 / 9 ]|,
      !bstm* |[ thisCode.emitPushInt(12);
                thisCode.emitPushInt(9);
                thisCode.emitDiv(); ]|
    )
    ; apply-test(!"Complex arithmetic with literals",
      assimilate-exp,
      !e |[ (4 + 12 / 2) - 5 ]|,
      !bstm* |[ thisCode.emitPushInt(4);
                thisCode.emitPushInt(12);
                thisCode.emitPushInt(2);
                thisCode.emitDiv();
                thisCode.emitAdd();
                thisCode.emitPushInt(5);
                thisCode.emitSub(); ]|
    )

  test-statements = id

    ; apply-test(!"Empty statement",
      assimilate-stm,
      !bstm |[ ; ]|,
      ![]
    )
    ; apply-test(!"Block of empty statements",
      assimilate-stm,
      !bstm |[ { ; ; ; ; } ]|,
      ![]
    )

  test-classdecs = id

    ; test-classdec(|"Simple class declaration"
      , type-dec |[ class Test2 { void m() { } } ]|
      , ["Test2"]
      )

strategies

  test-classdec(check |msg, src) =
    apply-and-check(!msg
    , assimilate-classdec
    , <process-input> [CompilationUnit(None, [], [src])]
      ; collect(?ClassDec(_, _))
      ; ?[<id>]
    , check
    )

  test-classdec(|msg, src, result) =
    apply-test(!msg
    , assimilate-classdec
    , <process-input> [CompilationUnit(None, [], [src])]
      ; collect(?ClassDec(_, _))
      ; ?[<id>]
    , !result
    )

  process-input =
/*
    print-to
    ; ![<id>]
    ; parse-java
    ;
*/
    map(define-compilation-unit)
    ; dryad-reclassify
    ; map(dryad-type-checker) 
    ; last
    ; get-ast
