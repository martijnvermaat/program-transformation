module assimilate-java/Expressions
imports
  assimilate-java/Util

  /**
   * todo: Method invocation, cast.
   */

rules

  /**
   * Assimilate decimal constant.
   */
  Assimilate(s) :
    e |[ i ]| -> bstm* |[ thisCode.emitPushInt( i ); ]|

  /**
   * Assimilate double constant. We only support doubles, so we treat floats
   * like doubles.
   */
  Assimilate(s) :
    Lit(Float(f)) -> bstm* |[ thisCode.emitPushDouble( ~<!Lit(Float(f))> ); ]|

  /**
   * Assimilate boolean constant.
   */
  Assimilate(s) :
    e |[ true ]| -> bstm* |[ thisCode.emitPushInt(1); ]|

  Assimilate(s) :
    e |[ false ]| -> bstm* |[ thisCode.emitPushInt(0); ]|

  /**
   * Assimilate local variable.
   */
  Assimilate(s) :
    e |[ x ]| -> bstm* |[ thisCode.emitLoad( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate array variable lookup.
   * todo: We only consider array lookup directly on the variable. I saw no
   *       other obvious solution to supporting array lookups for different
   *       element types and more dimensions.
   *       Implementing some type checking would be way too much work, and the
   *       type checker in Dryad does not seem to help us here.
   */
  Assimilate(s) :
    e |[ x [ e ] ]| -> bstm* |[ thisCode.emitLoad( ~var );
                                ~*< <s> e >
                                thisCode.emitArrayLoad( ~type ); ]|
    where   !ExprName(Id( <LocalVar> x ))   => var
          ; <ArrayType ; assimilate-type> x => type

  /**
   * Assimilate post-increment of local variable.
   */
  Assimilate(s) :
    e |[ x++ ]| -> bstm* |[ thisCode.emitLoad( ~var );
                            thisCode.emitInc( ~var , (short)1 ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate post-decrement of local variable.
   */
  Assimilate(s) :
    e |[ x-- ]| -> bstm* |[ thisCode.emitLoad( ~var );
                            thisCode.emitInc( ~var , (short)-1 ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate pre-increment of local variable.
   */
  Assimilate(s) :
    e |[ ++x ]| -> bstm* |[ thisCode.emitInc( ~var , (short)1 );
                            thisCode.emitLoad( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate pre-decrement of local variable.
   */
  Assimilate(s) :
    e |[ --x ]| -> bstm* |[ thisCode.emitInc( ~var , (short)-1 );
                            thisCode.emitLoad( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate binary operator.
   * todo: Use PrimType argument, eg Type.int_type for emitAdd method. This is
   * actually quite nasty, because Java expects us to do implicit casts, for
   * example 5 + 4l is a long-add with a conversion from int to long on the
   * first number. We won't do things like this.
   */
  Assimilate(s) :
    op#([e1, e2]) -> bstm* |[ ~*operands
                              thisCode.~method(); ]|
    where   <assimilate-operator> op => method
          ; <concat> [ <s> e1
                     , <s> e2 ] => operands

  /**
   * Assimilate > operator.
   * There are no booleans in bytecode. They are just 0 and 1 integers.
   */
  Assimilate(s) :
    e |[ e1 > e2 ]| -> bstm* |[ ~*operands
                                thisCode.emitIfGt();
                                thisCode.emitPushInt(1);
                                thisCode.emitElse();
                                thisCode.emitPushInt(0);
                                thisCode.emitFi(); ]|
    where <concat> [ <s> e1
                   , <s> e2 ] => operands

  /**
   * Assimilate < operator.
   * There are no booleans in bytecode. They are just 0 and 1 integers.
   */
  Assimilate(s) :
    e |[ e1 < e2 ]| -> bstm* |[ ~*operands
                                thisCode.emitIfLt();
                                thisCode.emitPushInt(1);
                                thisCode.emitElse();
                                thisCode.emitPushInt(0);
                                thisCode.emitFi(); ]|
    where <concat> [ <s> e1
                   , <s> e2 ] => operands

  /**
   * Assimilate assignment.
   */
  Assimilate(s) :
    e |[ x = e ]| -> bstm* |[ ~*< <s> e >
                              thisCode.emitDup();
                              thisCode.emitStore( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate array assignment.
   * The trouble is that we need the assigned value to leave it on the stack
   * after the assignment, but the ArrayStore expects the array reference and
   * index under it, so a simple duplicate will not do it.
   * This is a quick hack duplicating the value and than propagating it to the
   * top of the stack. An emitDup(size, 2) would also be possible, because we
   * know the size of the value from the type of the array elements. The code
   * would be even uglier though.
   */
  Assimilate(s) :
    e |[ x [ e1 ] = e2 ]| -> bstm* |[ ~*< <s> e2 >
                                      thisCode.emitDup();
                                      thisCode.emitLoad( ~var );
                                      thisCode.emitSwap();
                                      ~*< <s> e1 >
                                      thisCode.emitSwap();
                                      thisCode.emitArrayStore( ~type ); ]|
    where   !ExprName(Id( <LocalVar> x ))   => var
          ; <ArrayType ; assimilate-type> x => type

rules

  /**
   * Assimilate undercover local variable.
   * We kinda stretch the use of dryad, and it sometimes recognizes local
   * variables as if they were fields. Therefore we handle fields as if they
   * were local variables. We don't support real fields anyway.
   */
  Assimilate(s) :
    Field(Id(x)) -> bstm* |[ thisCode.emitLoad( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate post-increment of undercover local variable.
   */
  Assimilate(s) :
    PostIncr(Field(Id(x))) -> bstm* |[ thisCode.emitLoad( ~var );
                                       thisCode.emitInc( ~var , (short)1 ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate post-decrement of undercover local variable.
   */
  Assimilate(s) :
    PostDecr(Field(Id(x))) -> bstm* |[ thisCode.emitLoad( ~var );
                                       thisCode.emitInc( ~var , (short)-1 ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate pre-increment of undercover local variable.
   */
  Assimilate(s) :
    PreIncr(Field(Id(x))) -> bstm* |[ thisCode.emitInc( ~var , (short)1 );
                                      thisCode.emitLoad( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate pre-increment of undercover local variable.
   */
  Assimilate(s) :
    PreDecr(Field(Id(x))) -> bstm* |[ thisCode.emitInc( ~var , (short)-1 );
                                      thisCode.emitLoad( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate assignment where lefthand-side is an undercover variable.
   */
  Assimilate(s) :
    Assign(Field(Id(x)), e) -> bstm* |[ ~*< <s> e >
                                        thisCode.emitDup();
                                        thisCode.emitStore( ~var ); ]|
    where !ExprName(Id( <LocalVar> x )) => var

  /**
   * Assimilate array field lookup.
   */
  Assimilate(s) :
    ArrayAccess(Field(Id(x)), e) ->
    bstm* |[ thisCode.emitLoad( ~var );
             ~*< <s> e >
             thisCode.emitArrayLoad( ~type ); ]|
    where   !ExprName(Id( <LocalVar> x ))   => var
          ; <ArrayType ; assimilate-type> x => type
