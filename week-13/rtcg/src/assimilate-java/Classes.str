module assimilate-java/Classes
imports
  assimilate-java/Util
  assimilate-java/Statements

/**
 * Generated statements in concrete syntax are often ambiguous (in the
 * qualification part), but we ignore this. Pretty printing will 'just' fix
 * it, but a better solution would be to define some often-used qualifications
 * toplevel using abstract syntax. The test suite would also have to be fixed,
 * because it also contains these ambiguities.
 */

rules

  /**
   * Assimilate class declaration.
   */
  Assimilate(s) =
    ?ClassDec(head, body)
    ; <mapconcat(s)>[head, body]

  /**
   * Assimilate class declaration head.
   * todo: Annotations, type parameters.
   * todo: Should we generate empty constructor if none is given?
   */
  Assimilate(s) =
    ?ClassDecHead(mods, name, type-params, super, interfaces)
    ; <concat> [ <assimilate-class-name>       name
               , <assimilate-class-modifiers>  mods
               , <assimilate-class-super>      super
               , <assimilate-class-interfaces> interfaces ]

  /**
   * Assimilate class declaration body.
   */
  Assimilate(s) =
    ?ClassBody(decs)
    ; <mapconcat(s)> decs

  /**
   * Assimilate constructor declaration.
   */
  Assimilate(s) :
    ConstrDec(head, body) -> bstm* |[ ~*< <s> head >
                                      thisCode.pushScope();
                                      ~*< <s> body >
                                      thisCode.emitReturn();
                                      thisCode.popScope(); ]|

  /**
   * Assimilate method declaration.
   * If it is a void method, we make sure there is always a return generated.
   */
  Assimilate(s) :
    MethodDec(head@MethodDecHead(_, _, Void, _, _, _), body) ->
    bstm* |[ ~*< <s> head >
             thisCode.pushScope();
             ~*< <s> body >
             thisCode.emitReturn();
             thisCode.popScope(); ]|

  /**
   * Assimilate method declaration.
   */
  Assimilate(s) :
    MethodDec(head@MethodDecHead(_, _, t, _, _, _), body) ->
    bstm* |[ ~*< <s> head >
             thisCode.pushScope();
             ~*< <s> body >
             thisCode.popScope(); ]|
    where not( <?Void> t )

  /**
   * Assimilate constructor declaration head.
   * todo: Annotations, type parameters, throws.
   */
  Assimilate(s) =
    ?ConstrDecHead(mods, type-params, name, params, throws)
    ; <concat> [ <assimilate-constr-head>      params
               , <assimilate-constr-modifiers> mods
               , <generate-constr-init>
               , <assimilate-constr-params>    params ]

  /**
   * todo: Constructor invocations.
   */
  Assimilate(s) :
    ConstrBody(_, bstm*) -> bstm* |[ thisCode.emitLoad(thisVar);
                                     thisCode.emitInvokeSpecial(
                                       ClassType.make("java.lang.Object")
                                         .getMethod("<init>", new Type[] {}));
                                     ~*< <mapconcat(s)> bstm* > ]|

  /**
   * Assimilate method declaration head.
   * todo: Annotations, type parameters, throws.
   */
  Assimilate(s) =
    ?MethodDecHead(mods, type-params, result-type, name, params, throws)
    ; <concat> [ <assimilate-method-name>      name
               , <assimilate-method-sig>       (params, result-type)
               , <assimilate-method-modifiers> mods
               , <generate-method-init>
               , <assimilate-method-params>    params ]

  /**
   * Assimilate empty method declaration body.
   */
  Assimilate(s) :
    NoMethodBody -> []

strategies

  assimilate-class-name =
   ?Id(name)
   ; !Lit(String([Chars(name)]))
   ; !bstm* |[ thisClass = new ClassType(~<id>); ]|

  /**
   * Generate statement setting modifiers from list of modifiers.
   * See assimilate-method-modifiers below for an example.
   */
  assimilate-class-modifiers =
    if ?[] then ![] else
      foldr(!Lit(Deci("0")), combine-modifiers, assimilate-modifier)
      ; !bstm* |[ thisClass.setModifiers( ~<id> ); ]|
    end

  /**
   * Create a string from a superclass definition and use this in a setSuper
   * call.
   */
  assimilate-class-super =
    if ?None then
      !"java.lang.Object"
    else
      collect(is-string)
      ; separate-by(|".")
      ; foldr(!"", conc-strings)
    end
    ; !bstm* |[ thisClass.setSuper( ~<!Lit(String([Chars(<id>)]))> ); ]|

  /**
   * Generate statements setting interfaces implemented by the class.
   */
  assimilate-class-interfaces =
    if ?None then
      ![]
    else
      ?Some(ImplementsDec( <mapconcat(assimilate-class-interface)> ))
    end

  assimilate-class-interface =
    collect(is-string)
    ; separate-by(|".")
    ; foldr(!"", conc-strings)
    ; !bstm* |[ thisClass.addInterface(
                  new ClassType( ~<!Lit(String([Chars(<id>)]))> )); ]|

  assimilate-constr-head =
    map(assimilate-constr-param)
    ; !bstm* |[ thisMethod = thisClass.addMethod("<init>",
                                                 new Type[] { ~*<id> },
                                                 Type.void_type,
                                                 0); ]|

  /**
   * Generate type constructor from parameter.
   */
  assimilate-constr-param =
    get-parameter-type
    ; assimilate-type

  assimilate-constr-modifiers = 
    assimilate-method-modifiers

  generate-constr-init =
    generate-method-init

  /**
   * Generate statements for declaring method parameters and include 'this'
   * reference.
   */
  assimilate-constr-params =
    !bstm* |[ thisVar = thisCode.addLocal(thisClass, "this");
              ~*<mapconcat(assimilate-method-param)> ]|

  assimilate-method-name =
    ?Id(name)
    ; !Lit(String([Chars(name)]))
    ; !bstm* |[ thisMethod = thisClass.addMethod(~<id>); ]|

  /**
   * Generate a method signature from parameters and return type.
   * Example:
   *   ([Param(_, Boolean, _), Param(_, Int, _)], Void) -> "(ZI)V"
   */
  assimilate-method-sig = 
    ?(params, return)
    ; <concat-strings> [ "("
                       , <process-method-sig-params> params
                       , ")"
                       , <assimilate-descriptor> return ]
    ; !Lit(String([Chars(<id>)]))
    ; !bstm* |[ thisMethod.setSignature( ~<id> ); ]|

  /**
   * Get a string with type descriptors.
   */
  process-method-sig-params =
    map(get-parameter-type ; assimilate-descriptor)
    ; concat-strings

  /**
   * Extract type from method parameter.
   */
  get-parameter-type :
    Param(_, t, _) -> t

  /**
   * Generate statement setting modifiers from list of modifiers.
   * Example:
   *   [Public, Static] -> |[ thisMethod.setModifiers(
                                Access.PUBLIC | (Access.STATIC | 0)
                              ) ]|
   */
  assimilate-method-modifiers =
    if ?[] then ![] else
      foldr(!Lit(Deci("0")), combine-modifiers, assimilate-modifier)
      ; !bstm* |[ thisMethod.setModifiers( ~<id> ); ]|
    end

  /**
   * Generate initialization statements for method declaration.
   */
  generate-method-init =
    !bstm* |[ thisMethod.initCode();
              thisCode = thisMethod.getCode(); ]|

  /**
   * Generate statements for declaring method parameters.
   */
  assimilate-method-params =
    mapconcat(assimilate-method-param)

  /**
   * Generate statement for declaring method parameter.
   * todo: Modifiers, variable arity parameter?
   */
  assimilate-method-param :
    Param(_, type, Id(name)) ->
    bstm* |[ Variable ~var = thisCode.addLocal( ~vartype, ~varstring ); ]|
    where   !Id( <declare-local-var(|name, type)> ) => var
          ; <assimilate-type> type                  => vartype
          ; !Lit(String([Chars(name)]))             => varstring
