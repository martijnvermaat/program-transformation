module assimilate-java/Util

rules

  combine-modifiers :
    (mod, rest) -> Or(mod, rest)

  assimilate-modifier : Public       -> e |[ Access.PUBLIC       ]|
  assimilate-modifier : Private      -> e |[ Access.PRIVATE      ]|
  assimilate-modifier : Protected    -> e |[ Access.PROTECTED    ]|
  assimilate-modifier : Abstract     -> e |[ Access.Abstract     ]|
  assimilate-modifier : Final        -> e |[ Access.FINAL        ]|
  assimilate-modifier : Static       -> e |[ Access.STATIC       ]|
  assimilate-modifier : Native       -> e |[ Access.Native       ]|
  assimilate-modifier : Transient    -> e |[ Access.Transient    ]|
  assimilate-modifier : Volatile     -> e |[ Access.Volatile     ]|
  assimilate-modifier : Synchronized -> e |[ Access.Synchronized ]|
  assimilate-modifier : StrictFP     -> e |[ Access.StrictFP     ]|

  assimilate-descriptor : Void    -> "V"
  assimilate-descriptor : Boolean -> "Z"
  assimilate-descriptor : Byte    -> "B"
  assimilate-descriptor : Short   -> "S"
  assimilate-descriptor : Int     -> "I"
  assimilate-descriptor : Long    -> "J"
  assimilate-descriptor : Char    -> "C"
  assimilate-descriptor : Float   -> "F"
  assimilate-descriptor : Double  -> "D"

  assimilate-descriptor =
    (?ClassType(_, _) + ?InterfaceType(_, _))
    ; collect(is-string)
    ; separate-by(|"/")
    ; foldr(!"", conc-strings)
    ; <concat-strings> ["L", <id>, ";"]

  assimilate-descriptor =
    ?ArrayType(t)
    ; <concat-strings> ["[", <assimilate-descriptor> t ]

  assimilate-type : Boolean -> e |[ Type.boolean_type ]|
  assimilate-type : Byte    -> e |[ Type.byte_type    ]|
  assimilate-type : Short   -> e |[ Type.short_type   ]|
  assimilate-type : Int     -> e |[ Type.int_type     ]|
  assimilate-type : Long    -> e |[ Type.long_type    ]|
  assimilate-type : Char    -> e |[ Type.char_type    ]|
  assimilate-type : Float   -> e |[ Type.float_type   ]|
  assimilate-type : Double  -> e |[ Type.double_type  ]|

  assimilate-type =
    (?ClassType(_, _) + ?InterfaceType(_, _))
    ; collect(is-string)
    ; separate-by(|".")
    ; foldr(!"", conc-strings)
    ; !e |[ new ObjectType( ~<!Lit(String([Chars(<id>)]))> ) ]|

  assimilate-type :
    ArrayType(t) -> e |[ new ArrayType( e ) ]|
    where <assimilate-type> t => e

  assimilate-operator : "Plus"  -> Id("emitAdd")
  assimilate-operator : "Mul"   -> Id("emitMul")
  assimilate-operator : "Minus" -> Id("emitSub")
  assimilate-operator : "Div"   -> Id("emitDiv")

strategies

  /**
   * Generate new name for local variable and add rewrite rule for it. New
   * name is returned.
   * If the type is an array type we also add an ArrayType rule for this
   * variable which we use in array lookups.
   */
  declare-local-var(|name, type) =
    if <?ArrayType(t)> type then
      rules (
        ArrayType : name -> t
      )
    end
    ; <newname> "var" => var
    ; rules (
        LocalVar : name -> var
      )
