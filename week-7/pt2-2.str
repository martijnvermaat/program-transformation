module pt2-2
imports
  pt2-1
  Java-15
  libstrategolib


strategies

  main-pt2-2 =
    io-wrap(exc-20)


strategies

  /***************************************************************************
    Exercise strategies
  ***************************************************************************/

  /*
    Apply rewritings to Java fragment:
      * Remove Equality Check of True
      * Introduce Braces for Control-flow Statements
      * Invert .equals Constant
      * Invert If NotEq
      * Invert If Not
      * Introduce Print Stack Trace
      * Resolve Method Constructor Confusion
    We do a bottomup traversal. Some rewrites may introduce new rewritable
    constructs higher in the tree. The swapNotEqualIf rewrite however, may
    introduce new removeEqTrue-rewritable expressions, so an additional
    traversal down the children is needed in that case.
    Yes, this could maybe more easily be done with a single innermost or
    outermost strategy, but bottomup seems a lot more efficient.
  */
  exc-16 =
    bottomup-Java(
      repeat(
           removeEqTrue
        <+ introBlockIf
        <+ introBlockIfElse1
        <+ introBlockIfElse2
        <+ introBlockDoWhile
        <+ introBlockForEach
        <+ invertEqualsString
        <+   swapNotEqualIf
/*         ; bottomup-Java(repeat(removeEqTrue)) */
           ; try(If(removeEqTrue, id, id))
        <+ swapNotIf
        <+ introStackTraces
        <+ fixConstructorMethod
      )
    )

  /*
    Rewrite all strings to BorderLayout constants where they are an argument
    of the javax.swing.JPanel.add method.
  */
  exc-17 =
    bottomup-Java(
      try(replaceSymbolicConstant)
    )

  /*
    Oh, I defined my own bottomup-Java for exc-16, so this exercise is not
    much of a surprise now. Why a bottomup traversal was used is explained
    above.
  */
  exc-18 =
    bottomup(
      repeat(
           removeEqTrue
        <+ introBlockIf
        <+ introBlockIfElse1
        <+ introBlockIfElse2
        <+ introBlockDoWhile
        <+ introBlockForEach
        <+ invertEqualsString
        <+   swapNotEqualIf
/*         ; bottomup(repeat(removeEqTrue)) */
           ; try(If(removeEqTrue, id, id))
        <+ swapNotIf
        <+ introStackTraces
        <+ fixConstructorMethod
      )
    )

  /*
    A topdown traversal would also do here. Innermost or likewise is overkill
    because no new rewritable constructs are introduced. A simple alltd would
    not do however, since rewritable constructs may have rewritable constructs
    as descendants.
  */
  exc-19 =
    bottomup(
      try(replaceSymbolicConstant)
    )

  /*
    Use the special crafted traversal that applies the first strategy to all
    Java constructs (do nothing) but the second to Java constructs inside a
    finally clause (annotate return statements with "Error").
  */
  exc-20 =
    topdown-full(
      id,
      try(annotateReturn)
    )


  /***************************************************************************
    Helping strategies
  ***************************************************************************/

  /*
    Implementation of all traversal strategy for Java constructs using
    congruences.
  */
  all-Java(s) =
       []
    <+ [ s | all-Java(s) ]
    <+ None
    <+ CompilationUnit(s, s, s)
    <+ PackageDec(s, s)
    <+ TypeImportDec(s)
    <+ TypeImportOnDemandDec(s)
    <+ StaticImportDec(s, s)
    <+ StaticImportOnDemandDec(s)
    <+ Semicolon
    <+ Anno(s, s)
    <+ SingleElemAnno(s, s)
    <+ MarkerAnno(s)
    <+ ElemValPair(s, s)
    <+ PackageName(s)
    <+ AmbName(s)
    <+ AmbName(s, s)
    <+ TypeName(s, s)
    <+ TypeName(s, s)
    <+ ExprName(s)
    <+ ExprName(s, s)
    <+ MethodName(s)
    <+ MethodName(s, s)
    <+ PackageOrTypeName(s)
    <+ PackageOrTypeName(s, s)
    <+ ClassName(s)
    <+ ClassDec(s, s)
    <+ ClassBody(s)
    <+ ClassDecHead(s, s, s, s, s)
    <+ SuperDec(s)
    <+ ImplementsDec(s)
    <+ InterfaceDec(s, s)
    <+ InterfaceDecHead(s, s, s, s)
    <+ ExtendsInterfaces(s)
    <+ Id(s)
    <+ Public
    <+ Private
    <+ Static
    <+ Void
    <+ Block(s)
    <+ ClassDecStm(s)
    <+ LocalVarDecStm(s)
    <+ LocalVarDec(s, s, s)
    <+ Labeled(s, s)
    <+ Empty
    <+ ExprStm(s)
    <+ If(s, s)
    <+ If(s, s, s)
    <+ While(s, s)
    <+ DoWhile(s, s)
    <+ ForEach(s, s, s)
    <+ Return(s)
    <+ Try(s, s)
    <+ Try(s, s, s)
    <+ Catch(s, s)
    <+ Block(s)
    <+ ClassDecStm(s)
    <+ MethodDec(s, s)
    <+ MethodDecHead(s, s, s, s, s, s)
    <+ Param(s, s, s)
    <+ VarArityParam(s, s, s)
    <+ NoMethodBody
    <+ Class(s)
    <+ VoidClass
    <+ This
    <+ Assign(s, s)
    <+ Not(s)
    <+ Plus(s, s)
    <+ Invoke(s, s)
    <+ Method(s)
    <+ Method(s, s, s)
    <+ Field(s, s)
    <+ Eq(s, s)
    <+ NotEq(s, s)
    <+ Lit(s)
    <+ Bool(s)
    <+ True
    <+ False
    <+ ClassOrInterfaceType(s, s)
    <+ String(s)
    <+ Chars(s)
    <+ ConstrDec(s, s)
    <+ ConstrDecHead(s, s, s, s, s)
    <+ ConstrBody(s, s)
    <+ AltConstrInv(s, s)
    <+ SuperConstrInv(s, s)
    <+ id       /* unsupported constructs */

  /*
    Bottomup traversel for Java constructs.
  */
  bottomup-Java(s) =
      all-Java(bottomup-Java(s))
    ; s

  /*
    Topdown traversel for Java constructs.
  */
  topdown-Java(s) =
      s
    ; all-Java(topdown-Java(s))

  /*
    Alltd traversel for Java constructs.
  */
  alltd-Java(s) =
       s
    <+ all-Java(alltd-Java(s))

  /*
    Innermost traversel for Java constructs.
  */
  innermost-Java(s) =
    bottomup(try(s; innermost-Java(s)))

  /*
    Do a standard topdown traversal applying f to all nodes, but switch to the
    restricted environment when entering a finally clause.
  */
  topdown-full(f, r) =
      f
    ; (   Try(topdown-full(f, r), topdown-full(f, r), topdown-restricted(f, r))
       <+ all(topdown-full(f, r)))

  /*
    Do a standard topdown traversal applying r to all nodes, but switch to the
    full environment when entering a class body definition.
  */
  topdown-restricted(f, r) =
      r
    ; (   ClassBody(topdown-full(f, r))
       <+ all(topdown-restricted(f, r)))


rules

  /***************************************************************************
    Helping rules
  ***************************************************************************/

  /*
    Rewrite string to BorderLayout constant if it is an argument of the
    javax.swing.JPanel.add method.
  */
  replaceSymbolicConstant :
          Invoke(
            Method(MethodName(expr, Id("add"))),
            [component, Lit(String([Chars(s)]))]
          ){
            type,
            DeclaringClass(
              ClassType(
                TypeName(
                  PackageName([Id("javax"), Id("swing")]),
                  Id("JPanel")
                ),
                n
              )
            )
          }
        ->
          Invoke(
            Method(MethodName(expr, Id("add"))),
            [component,
             Field(TypeName(PackageName([Id("java"), Id("awt")]),
                             Id("BorderLayout")), Id(c))]
          ){
            type,
            DeclaringClass(
              ClassType(
                TypeName(
                  PackageName([Id("javax"), Id("swing")]),
                  Id("JPanel")
                ),
                n
              )
            )
          }
        where(<constantFromString>s => c)

  /*
    Rewrite string to BorderLayout constant.
  */
  constantFromString :
        "North"   -> "NORTH"
  constantFromString :
        "East"    -> "EAST"
  constantFromString :
        "South"   -> "SOUTH"
  constantFromString :
        "West"    -> "WEST"
  constantFromString :
        "Center"  -> "CENTER"

  /*
    Annotate a Java Return statement with the string "Error". This rule
    matches only a Return statement with no annotation. This prevents the rule
    from being applied again and again. However, if there may be unrelated
    annotations a little bit more sophisticated solution is required (though
    it will still be shorter than this comment).
  */
  annotateReturn :
        Return(e){} -> Return(e){"Error"}


/*****************************************************************************
    Make DeclaringClass constructor available
*****************************************************************************/

signature
  constructors
    DeclaringClass : Type -> Attribute
    
strategies

  declaring-class-attr = 
    ?_{a*}
    ; <fetch-elem(?DeclaringClass(<id>))> a*
