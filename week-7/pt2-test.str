module pt2-test
imports pt2 libstrategolib
strategies

  main-pt2-test =
    test-suite(!"pt2-test",
        exc-1-test;
        exc-2-test;
        exc-3-test;
        exc-4-test
     )

  exc-1-test =

    apply-test(!"exc-1-test-1",
      exc-1,
      !If(ExprName(Id("x")),Block([Empty]))
    );

    apply-test(!"exc-1-test-2",
      exc-1,
      !If(Lit(Bool(True)),Block([ExprStm(ExprName(Id("x")))]))
    );

    apply-test(!"exc-1-test-3",
      exc-1,
      !If(Lit(Bool(True)),Block([ExprStm(ExprName(Id("x")))]),Block([ExprStm(ExprName(Id("y")))]))
    );

    apply-test(!"exc-1-test-4",
      exc-1,
      !While(ExprName(Id("x")),Block([ExprStm(Lit(Bool(True)))]))
    );

    apply-test(!"exc-1-test-5",
      exc-1,
      !While(ExprName(Id("x")),Empty)
    );

    apply-test(!"exc-1-test-6",
      exc-1,
      !Return(Some(Lit(Bool(True))))
    );

    apply-and-fail(!"exc-1-test-7",
      exc-1,
      !ExprStm(Assign(ExprName(Id("x")),Lit(Deci("1"))))
    );

    apply-and-fail(!"exc-1-test-8",
      exc-1,
      !Lit(Bool(True))
    )

  exc-2-test =

    apply-test(!"exc-2-test-1",
      exc-2,
      !If(Lit(Bool(True)),Empty)
    );

    apply-test(!"exc-2-test-2",
      exc-2,
      !If(Lit(Bool(True)),Block([]))
    );

    apply-test(!"exc-2-test-3",
      exc-2,
      !If(Lit(Bool(True)),Block([Empty]),Block([ExprStm(Invoke(Method(MethodName(Id("x"))),[]))]))
    );

    apply-test(!"exc-2-test-4",
      exc-2,
      !If(Lit(Bool(True)),Block([]),Empty)
    );

    apply-test(!"exc-2-test-5",
      exc-2,
      !If(Lit(Bool(True)),Block([Empty]),Empty)
    );

    apply-test(!"exc-2-test-6",
      exc-2,
      !If(Lit(Bool(True)),Block([ExprStm(Invoke(Method(MethodName(Id("x"))),[]))]),Block([]))
    );

    apply-test(!"exc-2-test-7",
      exc-2,
      !If(Lit(Bool(True)),Empty,Block([ExprStm(ExprName(Id("m")))]))
    );

    apply-and-fail(!"exc-2-test-8",
      exc-2,
      !If(Lit(Bool(True)),ExprStm(ExprName(Id("m"))))
    );

    apply-and-fail(!"exc-2-test-9",
      exc-2,
      !If(Lit(Bool(True)),ExprStm(Invoke(Method(MethodName(Id("x"))),[])),Block([ExprStm(ExprName(Id("m")))]))
    );

    apply-and-fail(!"exc-2-test-10",
      exc-2,
      !If(Lit(Bool(True)),ExprStm(ExprName(Id("x"))),ExprStm(ExprName(Id("m"))))
    )

  exc-3-test =

    apply-test(!"exc-3-test-1",
      exc-3,
      !Eq(Lit(Bool(True)),ExprName(Id("x")))
    );

    apply-test(!"exc-3-test-2",
      exc-3,
      !Eq(ExprName(Id("x")),Lit(Bool(True)))
    );

    apply-test(!"exc-3-test-3",
      exc-3,
      !Eq(Lit(Bool(True)),Lit(Bool(True)))
    );

    apply-test(!"exc-3-test-4",
      exc-3,
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Lit(Bool(True)))
    );

    apply-and-fail(!"exc-3-test-5",
      exc-3,
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Invoke(Method(MethodName(Id("z"))),[]))
    );

    apply-and-fail(!"exc-3-test-6",
      exc-3,
      !Eq(Lit(Bool(False)),Lit(Bool(False)))
    )

  exc-4-test =

    apply-test(!"exc-4-test-1",
      exc-4,
      !Eq(Lit(Bool(True)),ExprName(Id("x"))),
      !ExprName(Id("x"))
    );

    apply-test(!"exc-4-test-2",
      exc-4,
      !Eq(ExprName(Id("x")),Lit(Bool(True))),
      !ExprName(Id("x"))
    );

    apply-test(!"exc-4-test-3",
      exc-4,
      !Eq(Lit(Bool(True)),Lit(Bool(True))),
      !Lit(Bool(True))
    );

    apply-test(!"exc-4-test-4",
      exc-4,
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Lit(Bool(True))),
      !LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x")))
    );

    apply-test(!"exc-4-test-5",
      exc-4,
      !Eq(Lit(Bool(False)),Lit(Bool(False))),
      !Eq(Lit(Bool(False)),Lit(Bool(False)))
    );

    apply-test(!"exc-4-test-6",
      exc-4,
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Invoke(Method(MethodName(Id("z"))),[])),
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Invoke(Method(MethodName(Id("z"))),[]))
    );

    apply-test(!"exc-4-test-7",
      exc-4,
      !Invoke(Method(MethodName(Id("m"))),[]),
      !Invoke(Method(MethodName(Id("m"))),[])
    )
