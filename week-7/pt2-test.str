module pt2-test
imports pt2 libstrategolib
strategies

  main-pt2-test =
    test-suite(!"pt2-test",
        exc-1-test;
        exc-2-test;
        exc-3-test;
        exc-4-test;
        exc-5-test;
        exc-6-test;
        exc-7-test;
        exc-8-test;
        exc-9-test;
        exc-10-test;
        exc-11-test;
        exc-12-test;
        exc-13-test;
        exc-14-test
    )

  exc-1-test =

    apply-test(!"exc-1-test-1",
      exc-1,
      !bstm |[
        if (hoi) { ; }
        ]|
    );

    apply-test(!"exc-1-test-2",
      exc-1,
      !bstm |[
        if (true) { ; }
        ]|
    );

    apply-test(!"exc-1-test-3",
      exc-1,
      !bstm |[
        if (true) {
          mmmx;
        } else {
          hhhj;
        }
        ]|
    );

    apply-test(!"exc-1-test-4",
      exc-1,
      !bstm |[
        while (cond) {
          true;
        }
        ]|
    );

    apply-test(!"exc-1-test-5",
      exc-1,
      !bstm |[
        while (wat);
        ]|
    );

    apply-test(!"exc-1-test-6",
      exc-1,
      !bstm |[
        return true;
        ]|
    );

    apply-and-fail(!"exc-1-test-7",
      exc-1,
      !bstm |[
        mijnvar = 1;
        ]|
    );

    apply-and-fail(!"exc-1-test-8",
      exc-1,
      !e |[
        true
        ]|
    )

  exc-2-test =

    apply-test(!"exc-2-test-1",
      exc-2,
      !bstm |[
        if (true);
        ]|
    );

    apply-test(!"exc-2-test-2",
      exc-2,
      !bstm |[
        if (true) { }
        ]|
    );

    apply-test(!"exc-2-test-3",
      exc-2,
      !bstm |[
        if (true) { }
        else {
          xvar();
        }
        ]|
    );

    apply-test(!"exc-2-test-4",
      exc-2,
      !bstm |[
        if (true) { } else;
        ]|
    );

    apply-test(!"exc-2-test-5",
      exc-2,
      !bstm |[
        if (true) { } else { }
        ]|
    );

    apply-test(!"exc-2-test-6",
      exc-2,
      !bstm |[
        if (true) {
          zooix();
        } else { }
        ]|
    );

    apply-test(!"exc-2-test-7",
      exc-2,
      !bstm |[
        if (true);
        else {
          hoi;
        }
        ]|
    );

    apply-and-fail(!"exc-2-test-8",
      exc-2,
      !bstm |[
        if (true) maar;
        ]|
    );

    apply-and-fail(!"exc-2-test-9",
      exc-2,
      !bstm |[
        if (true) hhh();
        else {
          mm;
        }
        ]|
    );

    apply-and-fail(!"exc-2-test-10",
      exc-2,
      !bstm |[
        if (true) zzz;
        else mmm;
        ]|
    );

    apply-and-fail(!"exc-2-test-11",
      exc-2,
      !bstm |[
        if (true) {
          ;
        } else mmm;
        ]|
    )

  exc-3-test =

    apply-test(!"exc-3-test-1",
      exc-3,
      !e |[
        true == jaja
        ]|
    );

    apply-test(!"exc-3-test-2",
      exc-3,
      !e |[
        zomaar == true
        ]|
    );

    apply-test(!"exc-3-test-3",
      exc-3,
      !e |[
        true == true
        ]|
    );

    apply-test(!"exc-3-test-4",
      exc-3,
      !e |[
        (zo() || erslfd) == true
        ]|
    );

    apply-and-fail(!"exc-3-test-5",
      exc-3,
      !e |[
        (zoaer() || ersfs) == erdfds()
        ]|
    );

    apply-and-fail(!"exc-3-test-6",
      exc-3,
      !e |[
        false == false
        ]|
    )

  exc-4-test =

    apply-test(!"exc-4-test-1",
      exc-4,
      !Eq(Lit(Bool(True)),ExprName(Id("x"))),
      !ExprName(Id("x"))
    );

    apply-test(!"exc-4-test-2",
      exc-4,
      !Eq(ExprName(Id("x")),Lit(Bool(True))),
      !ExprName(Id("x"))
    );

    apply-test(!"exc-4-test-3",
      exc-4,
      !Eq(Lit(Bool(True)),Lit(Bool(True))),
      !Lit(Bool(True))
    );

    apply-test(!"exc-4-test-4",
      exc-4,
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Lit(Bool(True))),
      !LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x")))
    );

    apply-test(!"exc-4-test-5",
      exc-4,
      !Eq(Lit(Bool(False)),Lit(Bool(False))),
      !Eq(Lit(Bool(False)),Lit(Bool(False)))
    );

    apply-test(!"exc-4-test-6",
      exc-4,
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Invoke(Method(MethodName(Id("z"))),[])),
      !Eq(LazyOr(Invoke(Method(MethodName(Id("m"))),[]),ExprName(Id("x"))),Invoke(Method(MethodName(Id("z"))),[]))
    );

    apply-test(!"exc-4-test-7",
      exc-4,
      !Invoke(Method(MethodName(Id("m"))),[]),
      !Invoke(Method(MethodName(Id("m"))),[])
    )

  exc-5-test =

    apply-test(!"exc-5-test-1",
      exc-5,
      !If(ExprName(Id("x")),ExprStm(Invoke(Method(MethodName(Id("x"))),[])))
    );

    apply-test(!"exc-5-test-2",
      exc-5,
      !If(ExprName(Id("x")),ExprStm(Invoke(Method(MethodName(Id("x"))),[])),ExprStm(Invoke(Method(MethodName(Id("m"))),[])))
    );

    apply-test(!"exc-5-test-3",
      exc-5,
      !If(ExprName(Id("x")),ExprStm(Invoke(Method(MethodName(Id("x"))),[])),Block([ExprStm(Invoke(Method(MethodName(Id("m"))),[]))]))
    );

    apply-test(!"exc-5-test-4",
      exc-5,
      !If(ExprName(Id("x")),Block([ExprStm(Invoke(Method(MethodName(Id("x"))),[]))]),ExprStm(Invoke(Method(MethodName(Id("m"))),[])))
    );

    apply-and-fail(!"exc-5-test-5",
      exc-5,
      !If(ExprName(Id("x")),Block([Empty]))
    );

    apply-and-fail(!"exc-5-test-6",
      exc-5,
      !If(ExprName(Id("x")),Block([ExprStm(Invoke(Method(MethodName(Id("h"))),[]))]),Block([]))
    );

    apply-and-fail(!"exc-5-test-7",
      exc-5,
      !If(ExprName(Id("x")),Block([ExprStm(Invoke(Method(MethodName(Id("h"))),[]))]),Block([ExprStm(ExprName(Id("n")))]))
    );

    apply-test(!"exc-5-test-8",
      exc-5,
      !DoWhile(ExprStm(ExprName(Id("x"))),ExprName(Id("b")))
    );

    apply-test(!"exc-5-test-9",
      exc-5,
      !DoWhile(ExprStm(Invoke(Method(MethodName(AmbName(Id("n")),Id("x"))),[])),ExprName(Id("b")))
    );

    apply-and-fail(!"exc-5-test-10",
      exc-5,
      !DoWhile(Block([ExprStm(Invoke(Method(MethodName(AmbName(Id("n")),Id("x"))),[]))]),ExprName(Id("b")))
    );

    apply-and-fail(!"exc-5-test-11",
      exc-5,
      !DoWhile(Block([]),ExprName(Id("b")))
    );

    apply-test(!"exc-5-test-12",
      exc-5,
      !ForEach(Param([],Int,Id("x")),ExprName(Id("ids")),ExprStm(Invoke(Method(MethodName(Id("m"))),[])))
    );

    apply-and-fail(!"exc-5-test-13",
      exc-5,
      !ForEach(Param([],Int,Id("x")),ExprName(Id("ids")),Block([]))
    )

  exc-6-test =

    apply-test(!"exc-6-test-1",
      exc-6,
      !If(ExprName(Id("b")),ExprStm(ExprName(Id("m")))),
      !If(ExprName(Id("b")),Block([ExprStm(ExprName(Id("m")))]))
    );

    apply-test(!"exc-6-test-2",
      exc-6,
      !If(ExprName(Id("b")),ExprStm(ExprName(Id("m"))),Block([])),
      !If(ExprName(Id("b")),Block([ExprStm(ExprName(Id("m")))]),Block([]))
    );

    apply-test(!"exc-6-test-3",
      exc-6,
      !If(ExprName(Id("b")),ExprStm(ExprName(Id("m"))),ExprStm(Invoke(Method(MethodName(Id("x"))),[]))),
      !If(ExprName(Id("b")),Block([ExprStm(ExprName(Id("m")))]),Block([ExprStm(Invoke(Method(MethodName(Id("x"))),[]))]))
    );

    apply-and-fail(!"exc-6-test-4",
      exc-6,
      !If(ExprName(Id("b")),Block([ExprStm(ExprName(Id("m")))]))
    );

    apply-test(!"exc-6-test-5",
      exc-6,
      !DoWhile(ExprStm(ExprName(Id("m"))),ExprName(Id("b"))),
      !DoWhile(Block([ExprStm(ExprName(Id("m")))]),ExprName(Id("b")))
    );

    apply-test(!"exc-6-test-6",
      exc-6,
      !DoWhile(Empty,ExprName(Id("b"))),
      !DoWhile(Block([Empty]),ExprName(Id("b")))
    );

    apply-and-fail(!"exc-6-test-7",
      exc-6,
      !DoWhile(Block([Empty]),ExprName(Id("b")))
    );

    apply-test(!"exc-6-test-8",
      exc-6,
      !ForEach(Param([],Int,Id("i")),ExprName(Id("ids")),ExprStm(ExprName(Id("b")))),
      !ForEach(Param([],Int,Id("i")),ExprName(Id("ids")),Block([ExprStm(ExprName(Id("b")))]))
    );

    apply-and-fail(!"exc-6-test-9",
      exc-6,
      !ForEach(Param([],Int,Id("i")),ExprName(Id("ids")),Block([ExprStm(ExprName(Id("b")))]))
    )

  exc-7-test =

    apply-test(!"exc-7-test-1",
      exc-7,
      !Assign(ExprName(Id("m")),ExprName(Id("m")))
    );

    apply-test(!"exc-7-test-2",
      exc-7,
      !Assign(ExprName(AmbName(Id("m")),Id("a")),ExprName(AmbName(Id("m")),Id("a")))
    );

    apply-and-fail(!"exc-7-test-3",
      exc-7,
      !Assign(ExprName(AmbName(Id("n")),Id("a")),ExprName(AmbName(Id("m")),Id("a")))
    );

    apply-and-fail(!"exc-7-test-4",
      exc-7,
      !Assign(ExprName(Id("m")),ExprName(Id("i")))
    );

    apply-and-fail(!"exc-7-test-5",
      exc-7,
      !Assign(ExprName(Id("m")),Mul(Lit(Deci("5")),Lit(Deci("1"))))
    );

    apply-and-fail(!"exc-7-test-6",
      exc-7,
      !ExprName(Id("m"))
    )

  exc-8-test =

    apply-test(!"exc-8-test-1",
      exc-8,
      !Invoke(Method(MethodName(AmbName(Id("bar")),Id("equals"))),[Lit(String([Chars("foo")]))]),
      !Invoke(Method(Lit(String([Chars("foo")])),None,Id("equals")),[ExprName(Id("bar"))])
    );

    apply-test(!"exc-8-test-2",
      exc-8,
      !Invoke(Method(MethodName(AmbName(AmbName(Id("z")),Id("bar")),Id("equals"))),[Lit(String([Chars("foo")]))]),
      !Invoke(Method(Lit(String([Chars("foo")])),None,Id("equals")),[ExprName(AmbName(Id("z")),Id("bar"))])
    );

    apply-and-fail(!"exc-8-test-3",
      exc-8,
      !Invoke(Method(Lit(String([Chars("foo")])),None,Id("equals")),[Lit(String([Chars("bar")]))])
    );

    apply-and-fail(!"exc-8-test-4",
      exc-8,
      !Invoke(Method(MethodName(AmbName(Id("m")),Id("equals"))),[ExprName(Id("b"))])
    );

    apply-and-fail(!"exc-8-test-5",
      exc-8,
      !Lit(String([Chars("hoi")]))
    )

  exc-9-test =

    apply-test(!"exc-9-test-1",
      exc-9,
      !If(NotEq(ExprName(Id("x")),ExprName(Id("y"))),ExprStm(Invoke(Method(MethodName(Id("doSomething"))),[])),
        ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[]))),
      !If(Eq(ExprName(Id("x")),ExprName(Id("y"))),ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[])),
        ExprStm(Invoke(Method(MethodName(Id("doSomething"))),[])))
    );

    apply-and-fail(!"exc-9-test-2",
      exc-9,
      !If(Eq(ExprName(Id("x")),ExprName(Id("y"))),ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[])),
        ExprStm(Invoke(Method(MethodName(Id("doSomething"))),[])))
    );

    apply-test(!"exc-9-test-3",
      exc-9,
      !If(NotEq(ExprName(Id("x")),ExprName(Id("y"))),Block([ExprStm(Invoke(Method(MethodName(Id("doSomething"))),[]))]),
        ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[]))),
      !If(Eq(ExprName(Id("x")),ExprName(Id("y"))),ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[])),
        Block([ExprStm(Invoke(Method(MethodName(Id("doSomething"))),[]))]))
    );

    apply-and-fail(!"exc-9-test-4",
      exc-9,
      !If(NotEq(ExprName(Id("x")),ExprName(Id("y"))),ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[])))
    );

    apply-test(!"exc-9-test-5",
      exc-9,
      !If(Not(Lit(Bool(True))),ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[])),
        Block([ExprStm(Invoke(Method(MethodName(Id("doSomething"))),[]))])),
      !If(Lit(Bool(True)),Block([ExprStm(Invoke(Method(MethodName(Id("doSomething"))),[]))]),
        ExprStm(Invoke(Method(MethodName(Id("doSomethingElse"))),[])))
    );

    apply-test(!"exc-9-test-6",
      exc-9,
      !If(Not(NotEq(ExprName(Id("x")),ExprName(Id("y")))),ExprStm(Invoke(Method(MethodName(Id("a"))),[])),
        ExprStm(Invoke(Method(MethodName(Id("b"))),[]))),
      !If(NotEq(ExprName(Id("x")),ExprName(Id("y"))),ExprStm(Invoke(Method(MethodName(Id("b"))),[])),
        ExprStm(Invoke(Method(MethodName(Id("a"))),[])))
    );

    apply-and-fail(!"exc-9-test-7",
      exc-9,
      !ExprStm(Invoke(Method(MethodName(Id("m"))),[]))
    )

  exc-10-test =

    apply-test(!"exc-10-test-1",
      exc-10,
      !class-body-dec |[
        void foo() {
          bar();
          return xvar;
        }
        ]|,
      !bstm |[
        return xvar;
        ]|
    );

    apply-test(!"exc-10-test-2",
      exc-10,
      !class-body-dec |[
        public static void main (String[] args) {
          bar();
          if (xvar) {
            return xvar;
          } else {
            return maa();
          }
        }
        ]|,
      !bstm |[
        if (xvar) {
          return xvar;
        } else {
          return maa();
        }
        ]|
    );

    apply-and-fail(!"exc-10-test-3",
      exc-10,
      !class-body-dec |[
        private String mijnM(String sss) ;
        ]|
    );

    apply-and-fail(!"exc-10-test-4",
      exc-10,
      !class-body-dec |[
        private String mijnM(String sss) { }
        ]|
    );

    apply-test(!"exc-10-test-5",
      exc-10,
      !class-body-dec |[
        private String mijnM(String sss) {
          ;
        }
        ]|,
      !bstm |[
        ;
        ]|
    );

    apply-test(!"exc-10-test-6",
      last-from-list,
      ![1, 2, 3, 4, 5],
      !5
    );

    apply-test(!"exc-10-test-7",
      last-from-list,
      ![3],
      !3
    );

    apply-test(!"exc-10-test-8",
      last-from-list,
      ![[2, 5], [1], [], [7, 3]],
      ![7, 3]
    );

    apply-and-fail(!"exc-10-test-9",
      last-from-list,
      ![]
    );

    apply-and-fail(!"exc-10-test-10",
      last-from-list,
      !"zomaar"
    )

  exc-11-test =

    apply-test(!"exc-11-test-1",
      exc-apply-first(\ 1 -> 4 \),
      ![3, 2, 1, 2, 3, 1],
      ![3, 2, 4, 2, 3, 1]
    );

    apply-test(!"exc-11-test-2",
      exc-apply-first(\ 3 -> 4 \),
      ![3, 2, 1, 2, 3, 1],
      ![4, 2, 1, 2, 3, 1]
    );

    apply-test(!"exc-11-test-3",
      exc-apply-first(\ 1 -> 4 \),
      ![1],
      ![4]
    );

    apply-and-fail(!"exc-11-test-4",
      exc-apply-first(\ 3 -> 4 \),
      ![5, 2, 1, 2, 33, 1]
    );

    apply-and-fail(!"exc-11-test-5",
      exc-apply-first(\ 3 -> 4 \),
      ![]
    )

  exc-12-test =

    apply-test(!"exc-12-test-1",
      exc-12,
      !bstm |[
        try { }
        catch (Etype javar) { }
        ]|
    );

    apply-test(!"exc-12-test-2",
      exc-12,
      !bstm |[
        try { }
        catch (Zomaar jaja) {
          ;
        }
        catch (Geen eeen) { }
        ]|
    );

    apply-and-fail(!"exc-12-test-3",
      exc-12,
      !bstm |[
        try { }
        catch (Want door) {
          want;
        }
        ]|
    );

    apply-test(!"exc-12-test-4",
      exc-12,
      !bstm |[
        try { }
        catch (Wawa ddd) { }
        finally {
          vdra;
        }
        ]|
    );

    apply-test(!"exc-12-test-5",
      exc-12,
      !bstm |[
        try { }
        catch (Uma dv) { }
        catch (Jkm weee) { }
        catch (Rers sdf) { }
        ]|
    );

    apply-test(!"exc-12-test-6",
      exc-12,
      !bstm |[
        try { }
        catch (Esc seee) { }
        catch (Usdf eecc) {
          ttm;
        }
        ]|
    );

    apply-and-fail(!"exc-12-test-7",
      exc-12,
      !bstm |[
        mrrr();
        ]|
    );

    apply-and-fail(!"exc-12-test-8",
      exc-12,
      !bstm |[
        try { }
        finally { }
        ]|
    )

  exc-13-test =

    apply-test(!"exc-13-test-1",
      exc-13,
      !bstm |[
        try { }
        catch(Et eed) { }
        ]|,
      !bstm |[
        try { }
        catch(Et eed) {
          eed.printStackTrace();
        }
        ]|
    );

    apply-and-fail(!"exc-13-test-2",
      exc-13,
      !bstm |[
        try { }
        catch (Ess ers) {
          ers();
        }
        ]|
    );

    apply-test(!"exc-13-test-3",
      exc-13,
      !bstm |[
        try { }
        catch(Eva eva) { }
        finally {
          metho();
        }
        ]|,
      !bstm |[
        try { }
        catch(Eva eva) {
          eva.printStackTrace();
        }
        finally {
          metho();
        }
        ]|
    );

    apply-test(!"exc-13-test-4",
      exc-13,
      !bstm |[
        try { }
        catch(Ett evv) { }
        catch(Att avv) { }
        catch(Mtt mvv) {
          metho();
        }
        ]|,
      !bstm |[
        try { }
        catch(Ett evv) {
          evv.printStackTrace();
        }
        catch(Att avv) {
          avv.printStackTrace();
        }
        catch(Mtt mvv) {
          metho();
        }
        ]|
    );

    apply-and-fail(!"exc-13-test-5",
      exc-13,
      !bstm |[
        try { }
        finally {
          meram();
        }
        ]|
    )

  exc-14-test =

    apply-test(!"exc-14-test-1",
      exc-14,
      !type-dec |[
        public class Foo {
          int xint;
          void Foo() {
            xint = 0;
          }
          void bar() { }
        }
        ]|,
      !type-dec |[
        public class Foo {
          int xint;
          Foo () {
            xint = 0;
          }
          void bar() { }
        }
        ]|
    );

    apply-test(!"exc-14-test-2",
      fixConstructorMethod(|"Foo"),
      !class-body-dec |[
        void Foo() {
          metho();
        }
        ]|,
      !class-body-dec |[
        Foo() {
          metho();
        }
        ]|
    );

    apply-test(!"exc-14-test-3",
      fixConstructorMethod(|"Foo"),
      !class-body-dec |[
        public String Foo(int ivar) {
          metho();
        }
        ]|,
      !class-body-dec |[
        public Foo(int ivar) {
          metho();
        }
        ]|
    );

    apply-test(!"exc-14-test-3",
      fixConstructorMethod(|"Foo"),
      !class-body-dec |[
        public String Foo(int ivar);
        ]|,
      !class-body-dec |[
        public Foo(int ivar) { }
        ]|
    );

    apply-and-fail(!"exc-14-test-4",
      fixConstructorMethod(|"Foo"),
      !class-body-dec |[
        void Bar(int ivar) {
          metho();
        }
        ]|
    );

    apply-test(!"exc-14-test-5",
      fixConstructorMethod,
      !type-dec |[
        public class Foo {
          int xint;
          void Foo() {
            xint = 0;
          }
          void bar() { }
          String Foo() { }
        }
        ]|,
      !type-dec |[
        public class Foo {
          int xint;
          Foo () {
            xint = 0;
          }
          void bar() { }
          String Foo() { }
        }
        ]|
    );

    apply-test(!"exc-14-test-6",
      fixConstructorMethod,
      !type-dec |[
        public class Foo {
          int xint;
          void bar() { }
          void Foo() {
            xint = 0;
          }
          String Foo() { }
        }
        ]|,
      !type-dec |[
        public class Foo {
          int xint;
          void bar() { }
          Foo () {
            xint = 0;
          }
          String Foo() { }
        }
        ]|
    );

    apply-and-fail(!"exc-14-test-7",
      fixConstructorMethod,
      !type-dec |[
        public class Foo {
          int xint;
          void bar() { }
          String foobar() { }
        }
        ]|
    );

    apply-test(!"exc-14-test-8",
      exc-14,
      !type-dec |[
        public class Foo {
          int xint;
          void Foo() {
            xint = 0;
          }
          void bar() { }
          String Foo(int mai) { }
        }
        ]|,
      !type-dec |[
        public class Foo {
          int xint;
          Foo () {
            xint = 0;
          }
          void bar() { }
          Foo(int mai) { }
        }
        ]|
    );

    apply-test(!"exc-14-test-9",
      exc-14,
      !type-dec |[
        public class Foo {
          int xint;
          void bar() { }
          public void Foo(int mai) {
            xint = 0;
          }
          String Foo() { }
        }
        ]|,
      !type-dec |[
        public class Foo {
          int xint;
          void bar() { }
          public Foo (int mai) {
            xint = 0;
          }
          Foo() { }
        }
        ]|
    );

    apply-test(!"exc-14-test-10",
      exc-14,
      !type-dec |[
        public class Foo {
          int xint;
          void bar() { }
          Foo() { sdfd(); }
          String foobar() { }
        }
        ]|,
      !type-dec |[
        public class Foo {
          int xint;
          void bar() { }
          Foo() { sdfd(); }
          String foobar() { }
        }
        ]|
    )
