module propconst/Statements
imports
  libdryad
  propconst/Expressions

strategies

  /**
   * Propagate constants in method body. Scope PropConst rules so constant
   * values are not propagated outside this transformation.
   * todo: PropConst rules don't need labels
   */
  propconst-method-body =
    {| PropConst : propconst-stat |}

  /**
   * Propagate constants in statement.
   */
  propconst-stat =
       propconst-empty-stm
    <+ propconst-block-stm
    <+ propconst-expr-stm
    <+ propconst-local-var-dec-stm
    <+ propconst-if-then-else-stm
    <+ propconst-while-stm
    <+ propconst-labeled-stm
/*  <+ all(propconst-stat) */

  /**
   * Do nothing with empty statement.
   */
  propconst-empty-stm =
    Empty

  /**
   * Statements in block.
   * Don't scope PropConst rules on block level, because Java does not know
   * shadowing. Also, field value propagation would have to be implemented
   * with seperate rule names.
   */
  propconst-block-stm =
    Block( map(propconst-stat) )

  /**
   * Propagate constants in expression.
   */
  propconst-expr-stm =
    ExprStm(propconst-exp)

  /**
   * Propagate constants in local variable declaration.
   */
  propconst-local-var-dec-stm =
    LocalVarDecStm(LocalVarDec(id, id, map(propconst-var-dec)))

  /**
   * Simple declaration.
   */
  propconst-var-dec =
    VarDec(Id(?var))
    ; rules ( PropConst+var :- ExprName(Id(var)) )

  /**
   * Declaration with assignment.
   */
  propconst-var-dec =
    VarDec(Id(?var), propconst-exp => e)
    ; rules ( PropConst+var :- ExprName(Id(var)) )
    ; if <is-value>e then
        rules ( PropConst.var :  ExprName(Id(var)) -> e )
      end

  /**
   * Labeled statement.
   */
  propconst-labeled-stm =
    Labeled(id, propconst-stat)

  /**
   * If-then-else statement. Propagate constants in condition, then try to
   * evaluate if-then-else, otherwise propagate constants in both branches.
   * todo: simple if-then statement
   */
  propconst-if-then-else-stm =
    If(propconst-exp, id, id)
    ; (RewriteIfThenElse; propconst-stat
       <+ If(id, propconst-stat, id) /PropConst\ If(id, id, propconst-stat))

  /**
   * While-statement. Propagate constants while intersection of PropConst
   * reaches a fixpoint.
   */
  propconst-while-stm =
    While(propconst-exp, id)
    ; (RewriteWhile
       <+ (/PropConst\* While(propconst-exp, propconst-stat)))
