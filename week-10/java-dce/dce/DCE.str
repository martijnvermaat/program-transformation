module dce/DCE
imports
  libdryad
  dce/Rules

strategies

  /**
   * Eliminate dead code in method body.
   * todo: scope rules
   * todo: fields
   * todo: declarations
   */
  dce-method-body =
    dce-stm

  dce-stm =
       dce-empty-stm
    <+ dce-block-stm
    <+ dce-expr-stm
    <+ dce-local-var-dec-stm
/*
    <+ dce-if-then-else-stm
    <+ dce-while-stm
    <+ dce-labeled-stm
*/

  dce-empty-stm =
    Empty

  dce-block-stm =
    Block( reverse-map(dce-stm) )

  dce-expr-stm =
    ?ExprStm( <id> )
    ; (dce-assign-expr <+ dce-simple-expr)
    ; !Block( <map(!ExprStm( <id> ) )> )

  dce-assign-expr =
    ?Assign(_, _)
    ; if ElimAssign
      then dce-simple-expr
      else ![ <Assign(id, declare-vars-needed)> ] end

  dce-simple-expr =
    collect(?Invoke(_, _))
    ; reverse-map(declare-vars-needed)

  dce-local-var-dec-stm =
    id

  declare-vars-needed =
    alltd({var :
      ?ExprName(Id(var))
      ; rules(
          VarNeeded.var : var
          VarUsed.var   : var
         )
    })
