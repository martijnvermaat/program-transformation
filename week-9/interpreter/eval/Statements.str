module eval/Statements
imports 
  libdryad
  eval/Expressions
  eval/Primitive
  eval/Rules

strategies

  /**
   * Evaluate statement.
   */
  eval-stat =
       eval-empty-stm
    <+ eval-block-stm
    <+ eval-expr-stm
    <+ eval-local-var-dec-stm
    <+ eval-if-then-else-stm
    <+ eval-while-stm
    <+ eval-goto-stm
    <+ eval-return-stm

  /**
   * Do nothing with empty statement.
   */
  eval-empty-stm =
    Empty

  /**
   * Evaluate statements in block.
   * Note: scoping of EvalVar rules here is not correct; Java doesn't know
   * local shadowing of variables. Scoping should occur at method body level
   * though...
   */
  eval-block-stm =
    Block( {| EvalVar : map(eval-stat) |} )

  /**
   * Evaluate expression.
   */
  eval-expr-stm =
    ExprStm(eval-exp)

  /**
   * Evaluate local variable declaration.
   */
  eval-local-var-dec-stm =
    ?LocalVarDecStm(LocalVarDec(_, _, <id>))
    ; map(eval-var-dec)

  /**
   * Simple declaration.
   */
  eval-var-dec =
    VarDec(Id(?var))
    ; rules ( EvalVar+var :- ExprName(Id(var)) )

  /**
   * Declaration with assignment.
   */
  eval-var-dec =
    VarDec(Id(?var), eval-exp => value)
    ; rules ( EvalVar+var :- ExprName(Id(var)) )
    ; rules ( EvalVar.var :  ExprName(Id(var)) -> value )

  /**
   * Evaluate if-then-else statement.
   */
  eval-if-then-else-stm =
    If(eval-exp, id, id)
    ; RewriteIfThenElse
    ; eval-stat

  /**
   * Evaluate while statement. Rewrite the while statement to an if statement
   * with a Goto statement appended to the body. The Goto statement will be
   * rewritten to a new such if statement with a dynamic rule.
   */
  eval-while-stm =
    ?While(e, b)
    ; where( new => label )
    ; where( !Block([b, Goto(label)]) => b' )
    ; rules( EvalGoto : Goto(label) -> <eval-stat>If(e, b', Empty) )
    ; <eval-stat>Goto(label)

  /**
   * Evaluate goto statement.
   */
  eval-goto-stm =
    EvalGoto

  /**
   * Return statement defines a dynamic rule.
   */
  eval-return-stm =
    ?Return(Some(<eval-exp => value>))
    ; rules( GetReturnValue :- _ )
    ; rules( GetReturnValue : _ -> value )

/**
 * Goto constructor is used in evaluation of while statements.
 */
signature
  constructors
    Goto : String -> Stat
