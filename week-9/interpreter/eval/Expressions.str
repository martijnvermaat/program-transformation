module eval/Expressions
strategies

  eval-exp =
    bottomup-exp(
         EvalVar
      <+ EvalBinOp
      <+ EvalCond
      <+ debug(!"-- Cannot evaluate expression: ")
         ; fail
    )

  bottomup-exp(s) =
       ?Lit(_)
    <+ ?Id(_)
    <+ ?Invoke(_, _)
       ; eval-primitives(s)
    <+ Assign(ExprName(Id(id)), bottomup-exp(s))
       ; ?Assign(ExprName(Id(var)), <id => value>)
       ; rules( EvalVar.var : ExprName(Id(var)) -> value )
    <+ all(bottomup-exp(s))
       ; s

  eval-primitives(s) =
    eval-println(s)

  eval-println(s) =
    ?Invoke(
          Method(
            MethodName(
              Field(
                TypeName(
                  PackageName([Id("java"), Id("lang")])
                , Id("System")
                )
              , Id("out")
              )
            , Id("println")
            )
          )
        , [ <bottomup-exp(s)> ]
    )
    ; ?Lit(String([Chars(string)]))
    ; <fprintnl> (stdout(), [string])
    ; <fflush> stdout()

signature
  constructors
    Ref : String -> Ref
