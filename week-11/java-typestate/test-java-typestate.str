module test-java-typestate
imports
  java-typestate

strategies

  main-test-java-typestate =
    option-wrap(general-options,
      test-suite(!"WK11 assignment",
        observables-wrap(
          init-tests
        ; null-tests
        )
      )
    )

strategies

  init-tests =
    /*
      Environment of parameter typestates.
    */
    rules (
        ParameterState : "y_init"      -> Init
        ParameterState : "y_uninit"    -> UnInit
        ParameterState : "y_dunno"     -> Dunno
    )
    ; init-simple-tests
    ; init-control-flow-tests

  null-tests =
    /*
      Environment of parameter typestates.
    */
    rules (
        ParameterState : "s_null"      -> Null
        ParameterState : "s_notnull"   -> NotNull
        ParameterState : "s_maybenull" -> MaybeNull
    )
    /*
      Environment of method return typestates.
    */
    ; rules (
        MethodState : MethodName(
                          TypeName(PackageName([]), Id("Foo"))
                        , Id("m_null")
                        , []
                        , ClassType(
                            TypeName(
                              PackageName([Id("java"), Id("lang")])
                            , Id("String")
                            )
                          , None
                          )
                        ) -> Null
        MethodState : MethodName(
                          TypeName(PackageName([]), Id("Foo"))
                        , Id("m_notnull")
                        , []
                        , ClassType(
                            TypeName(
                              PackageName([Id("java"), Id("lang")])
                            , Id("String")
                            )
                          , None
                          )
                        ) -> NotNull
        MethodState : MethodName(
                          TypeName(PackageName([]), Id("Foo"))
                        , Id("m_maybenull")
                        , []
                        , ClassType(
                            TypeName(
                              PackageName([Id("java"), Id("lang")])
                            , Id("String")
                            )
                          , None
                          )
                        ) -> MaybeNull
        MethodState : MethodName(
                          TypeName(PackageName([]), Id("Foo"))
                        , Id("n_null")
                        , [ ClassType(
                              TypeName(
                                PackageName([Id("java"), Id("lang")])
                              , Id("String")
                              )
                            , None
                            )
                          , Int
                          ]
                        , ClassType(
                            TypeName(
                              PackageName([Id("java"), Id("lang")])
                            , Id("String")
                            )
                          , None
                          )
                        ) -> Null
        MethodState : MethodName(
                          TypeName(PackageName([]), Id("Foo"))
                        , Id("n_notnull")
                        , [ ClassType(
                              TypeName(
                                PackageName([Id("java"), Id("lang")])
                              , Id("String")
                              )
                            , None
                            )
                          , Int
                          ]
                        , ClassType(
                            TypeName(
                              PackageName([Id("java"), Id("lang")])
                            , Id("String")
                            )
                          , None
                          )
                        ) -> NotNull
        MethodState : MethodName(
                          TypeName(PackageName([]), Id("Foo"))
                        , Id("n_maybenull")
                        , [ ClassType(
                              TypeName(
                                PackageName([Id("java"), Id("lang")])
                              , Id("String")
                              )
                            , None
                            )
                          , Int
                          ]
                        , ClassType(
                            TypeName(
                              PackageName([Id("java"), Id("lang")])
                            , Id("String")
                            )
                          , None
                          )
                        ) -> MaybeNull
    )
    ; null-simple-tests
    ; null-control-flow-tests

strategies

  init-simple-tests = id
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UniInit), _*} )
    | "Simple variable"
    , "class Foo { public void foo() { int x; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple initialized variable"
    , "class Foo { public void foo() { int x = 1; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple initialized variable"
    , "class Foo { public void foo() { int x; x = 1; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple constant value"
    , "class Foo { public void foo() { result : 4; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple constant value expression"
    , "class Foo { public void foo() { result : 4 + 9; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UnInit), _*} )
    | "Simple constant value expression"
    , "class Foo { public void foo() { int x; result : 4 + x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UnInit), _*} )
    | "Simple initialized variable"
    , "class Foo { public void foo() { int x, y; x = y; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple method parameter"
    , "class Foo { public void foo(int y_init) { result : y_init; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UnInit), _*} )
    | "Simple method parameter"
    , "class Foo { public void foo(int y_uninit) { result : y_uninit; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Dunno), _*} )
    | "Simple method parameter"
    , "class Foo { public void foo(int y_dunno) { result : y_dunno; } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(Init), t*} ) }
    | "Simple method call"
    , "class Foo { public void foo() { result : System.out.println(); } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(Init), t*} ) }
    | "Simple method call with parameter"
    , "class Foo { public void foo() { result : System.out.println(\"\"); } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(UnInit), t*} ) }
    | "Simple method call with uninitialized parameter"
    , "class Foo { public void foo() { int y; result : System.out.println(y); } }"
    )

strategies

  init-control-flow-tests = id
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UniInit), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x; if (true) ; else ; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x = 1; if (true) ; else ; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x; if (true) x=1; else x=4; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x = 1; if (true) x=1; else ; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Dunno), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x; if (true) x=1; else ; result : x; } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(Init), t*} ) }   /* hack; why does the _* not match
                                                  here?!?
                                                  guess there's an unscoped variable
                                                  somewhere... */
    | "Conditional of if-then-else statement"
    , "class Foo { public void foo() { boolean x; if (x = true) ; else ; result : x; } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(Init), t*} ) }
    | "Conditional of while statement"
    , "class Foo { public void foo() { boolean x; while (x = true) ; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Dunno), _*} )
    | "Simple while statement"
    , "class Foo { public void foo() { int x; while (true) x = 2; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple while statement"
    , "class Foo { public void foo() { int x = 3; while (true) x = 2; result : x; } }"
    )

strategies

  null-simple-tests = id
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(Null), t*} ) }
    | "Literal null value"
    , "class Foo { public void foo() { result : null; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Null), _*} )
    | "Simple null variable"
    , "class Foo { public void foo() { String x; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(NotNull), _*} )
    | "Simple object expression"
    , "class Foo { public void foo() { result : \"hoi\" + \"haai\"; } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(NotNull), t*} ) }
    | "Simple instance"
    , "class Foo { public void foo() { result : new String(\"\"); } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(NotNull), _*} )
    | "Simple not null propagation"
    , "class Foo { public void foo() { String n; n = \"haai\"; result : n; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Null), _*} )
    | "Simple null propagation"
    , "class Foo { public void foo() { String n; n = null; result : n; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Null), _*} )
    | "Simple null propagation"
    , "class Foo { public void foo() { String n = \"\"; n = null; result : n; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Null), _*} )
    | "Simple method parameter for nullness"
    , "class Foo { public void foo(String s_null) { result : s_null; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(NotNull), _*} )
    | "Simple method parameter for nullness"
    , "class Foo { public void foo(String s_notnull) { result : s_notnull; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(MaybeNull), _*} )
    | "Simple method parameter for nullness"
    , "class Foo { public void foo(String s_maybenull) { result : s_maybenull; } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(Null), t*} ) }
    | "Simple method call for nullness"
    , "class Foo { public String m_null() { return \"\"; } public void foo() { result : m_null(); } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(NotNull), t*} ) }
    | "Simple method call for nullness"
    , "class Foo { public String m_notnull() { return \"\"; } public void foo() { result : m_notnull(); } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(MaybeNull), t*} ) }
    | "Simple method call for nullness"
    , "class Foo { public String m_maybenull() { return \"\"; } public void foo() { result : m_maybenull(); } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(NotNull), t*} ) }
    | "Simple method call for nullness"
    , "class Foo { public String n_notnull(String s_notnull, int y_notnull) { return \"\"; } public void foo() { result : n_notnull(\"\", 5); } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(NotNull), t*} ) }
    | "Simple method call for nullness"
    , "class Foo { public String n_notnull(String s_notnull, int y_notnull) { return \"\"; } public void foo() { result : n_notnull(null, 5); } }"
    )
  ; test-compilation-unit(
      { ?ExprStm( _{TypeState(Null), t*} ) }
    | "Simple method call for nullness"
    , "class Foo { public String n_null(String s_notnull, int y_notnull) { return \"\"; } public void foo() { result : n_null(\"\", 5); } }"
    )

strategies

  null-control-flow-tests = id
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(NotNull), _*} )
    | "Simple if-then-else statement with null check"
    , "class Foo { public void foo(String s_maybenull) { if (s_maybenull != null) result: s_maybenull; else ; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Null), _*} )
    | "Simple if-then-else statement with null check"
    , "class Foo { public void foo(String s_maybenull) { if (s_maybenull == null) result: s_maybenull; else ; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(MaybeNull), _*} )
    | "Simple if-then-else statement with null check"
    , "class Foo { public void foo(String s_maybenull) { if (s_maybenull != null) ; else ; result: s_maybenull; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(NotNull), _*} )
    | "Simple if-then-else statement with null check"
    , "class Foo { public void foo(String s_maybenull) { if (s_maybenull == null) ; else result: s_maybenull; } }"
    )

/**
 * Testing utils
 */
strategies

  test-compilation-unit(check |msg, src) =
    apply-and-check(!msg
    , typestate-compilation-unit
      ; get-test-result             
    , <process-input> src   
    , check
    )

  test-compilation-unit(|msg, src, result) =
    apply-test(!msg
    , typestate-compilation-unit
      ; get-test-result
/*      ; strip-annos */
    , <process-input> src   
    , !result
    )

  get-test-result =
    oncetd(?Labeled(Id("result"), stm))
    ; !stm

  process-input =
    print-to
    ; ![<id>]
    ; parse-java
    ; map(define-compilation-unit)
    ; dryad-reclassify
    ; map(dryad-type-checker) 
    ; last
    ; get-ast
