module test-java-typestate
imports
  java-typestate

strategies

  main-test-java-typestate =
    option-wrap(general-options,
      test-suite(!"WK11 assignment",
        observables-wrap(
          simple-tests
        ; control-flow-tests
        )
      )
    )

strategies

  simple-tests = id
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UniInit), _*} )
    | "Simple variable"
    , "class Foo { public void foo() { int x; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple initialized variable"
    , "class Foo { public void foo() { int x = 1; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple initialized variable"
    , "class Foo { public void foo() { int x; x = 1; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple constant value"
    , "class Foo { public void foo() { result : 4; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple constant value expression"
    , "class Foo { public void foo() { result : 4 + 9; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UnInit), _*} )
    | "Simple constant value expression"
    , "class Foo { public void foo() { int x; result : 4 + x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UnInit), _*} )
    | "Simple initialized variable"
    , "class Foo { public void foo() { int x, y; x = y; result : x; } }"
    )

strategies

  control-flow-tests = id
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(UniInit), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x; if (true) ; else ; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x = 1; if (true) ; else ; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x; if (true) x=1; else x=4; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Init), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x = 1; if (true) x=1; else ; result : x; } }"
    )
  ; test-compilation-unit(
      ?ExprStm( _{TypeState(Dunno), _*} )
    | "Simple if-then-else statement"
    , "class Foo { public void foo() { int x; if (true) x=1; else ; result : x; } }"
    )


/**
 * Testing utils
 */
strategies

  test-compilation-unit(check |msg, src) =
    apply-and-check(!msg
    , typestate-compilation-unit
      ; get-test-result             
    , <process-input> src   
    , check
    )

  test-compilation-unit(|msg, src, result) =
    apply-test(!msg
    , typestate-compilation-unit
      ; get-test-result
/*      ; strip-annos */
    , <process-input> src   
    , !result
    )

  get-test-result =
    oncetd(?Labeled(Id("result"), stm))
    ; !stm

  process-input =
    print-to
    ; ![<id>]
    ; parse-java
    ; map(define-compilation-unit)
    ; dryad-reclassify
    ; map(dryad-type-checker) 
    ; last
    ; get-ast
