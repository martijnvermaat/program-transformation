module typestate/Statements
imports
  libdryad
  typestate/Expressions

strategies

  /**
   * Propagate constants in method body. Scope Typestate rules so constant
   * values are not propagated outside this transformation.
   */
  typestate-method-body =
    {| Typestate : typestate-stat |}

  /**
   * Propagate constants in statement.
   */
  typestate-stat =
       typestate-empty-stm
    <+ typestate-block-stm
    <+ typestate-expr-stm
    <+ typestate-local-var-dec-stm
    <+ typestate-if-then-else-stm
    <+ typestate-while-stm
    <+ typestate-labeled-stm
/*  <+ all(typestate-stat) */

  /**
   * Do nothing with empty statement.
   */
  typestate-empty-stm =
    Empty

  /**
   * Statements in block.
   * Don't scope Typestate rules on block level, because Java does not know
   * shadowing. Also, field value propagation would have to be implemented
   * with seperate rule names.
   */
  typestate-block-stm =
    Block( map(typestate-stat) )

  /**
   * Propagate constants in expression.
   */
  typestate-expr-stm =
    ExprStm(typestate-exp)

  /**
   * Propagate constants in local variable declaration.
   */
  typestate-local-var-dec-stm =
    LocalVarDecStm(LocalVarDec(id, id, map(typestate-var-dec)))

  /**
   * Simple declaration.
   */
  typestate-var-dec =
    VarDec(Id(?var))
    ; rules ( Typestate+var :- ExprName(Id(var)) )

  /**
   * Declaration with assignment.
   */
  typestate-var-dec =
    VarDec(Id(?var), typestate-exp => e)
    ; rules ( Typestate+var :- ExprName(Id(var)) )
    ; if <is-value>e then
        rules ( Typestate.var :  ExprName(Id(var)) -> e )
      end

  /**
   * Labeled statement.
   */
  typestate-labeled-stm =
    Labeled(id, typestate-stat)

  /**
   * If-then-else statement. Propagate constants in condition, then try to
   * evaluate if-then-else, otherwise propagate constants in both branches.
   * todo: simple if-then statement
   */
  typestate-if-then-else-stm =
    If(typestate-exp, id, id)
    ; (RewriteIfThenElse; typestate-stat
       <+ If(id, typestate-stat, id) /Typestate\ If(id, id, typestate-stat))

  /**
   * While-statement. Propagate constants while intersection of Typestate
   * reaches a fixpoint.
   */
  typestate-while-stm =
    While(typestate-exp, id)
    ; (RewriteWhile
       <+ (/Typestate\* While(typestate-exp, typestate-stat)))
