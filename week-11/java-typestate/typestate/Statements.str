module typestate/Statements
imports
  libdryad
  typestate/Expressions

strategies

  typestate-method-body =
    {| TypeState : typestate-stat |}

  typestate-stat =
       typestate-empty-stm
    <+ typestate-block-stm
    <+ typestate-expr-stm
    <+ typestate-local-var-dec-stm
/*
    <+ typestate-if-then-else-stm
    <+ typestate-while-stm
    <+ typestate-labeled-stm
*/
    <+ debug(!"unsupported statement: ")

  /**
   * Do nothing with empty statement.
   */
  typestate-empty-stm =
    ?Empty

  /**
   * Statements in block.
   */
  typestate-block-stm =
    Block( map(typestate-stat) )

  /**
   * Propagate typestate in expression.
   */
  typestate-expr-stm =
    ExprStm(typestate-exp)

  /**
   * Propagate constants in local variable declaration.
   */
  typestate-local-var-dec-stm =
    LocalVarDecStm(LocalVarDec(id, id, map(typestate-var-dec)))

  /**
   * Simple declaration.
   */
  typestate-var-dec =
    VarDec(Id(?var))
    ; rules ( Typestate+var :- ExprName(Id(var)) )

  /**
   * Declaration with assignment.
   */
  typestate-var-dec =
    VarDec(Id(?var), typestate-exp => e)
    ; rules ( Typestate+var :- ExprName(Id(var)) )
    ; if <is-value>e then
        rules ( Typestate.var :  ExprName(Id(var)) -> e )
      end
